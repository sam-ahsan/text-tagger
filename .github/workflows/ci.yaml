name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Write CI env file
        run: |
          cat > .env.ci << 'EOF'
          # --- API / Auth ---
          JWT_SECRET=ci-secret
          JWT_ALG=HS256
          ACCESS_TOKEN_EXPIRE_MINUTES=60
          # --- Celery / Redis ---
          REDIS_URL=redis://redis:6379/0
          CELERY_TAGGING_QUEUE=tagging
          CELERY_SOFT_TIME_LIMIT=55
          CELERY_TIME_LIMIT=60
          CELERY_RESULT_EXPIRES=3600
          CACHE_TTL_SECONDS=600
          # --- Rate limiting (high during CI) ---
          RATE_LIMIT_REQS=1000
          RATE_LIMIT_WINDOW=60
          # --- Python path inside container ---
          PYTHONPATH=/app
          # --- HuggingFace/torch caches (already volume mounted) ---
          TRANSFORMERS_CACHE=/root/.cache/huggingface
          HF_HOME=/root/.cache/huggingface
          EOF
      
      - name: Build images
        run: |
          docker-compose -f docker-compose.yaml -f docker-compose.ci.yaml build --no-cache
      
      - name: Start stack
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml --env-file ./.env.ci up -d

      - name: Wait for API to be healthy
        run: |
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/healthz || true)
            if [ "$code" = "200" ]; then
              echo "API is healthy"
              exit 0
            fi
            sleep 2
          done
          echo "API failed to become healthy"
          docker compose ps
          docker compose logs api worker redis --tail=200
          exit 1

      - name: Install test deps inside container
        run: |
          # If you keep dev deps separate, install them here.
          docker compose exec -T api /bin/sh -lc 'pip install -q pytest httpx fakeredis ruff mypy'

      - name: Lint (ruff)
        run: |
          docker compose exec -T api ruff check .

      - name: Type check (mypy)
        continue-on-error: true
        run: |
          docker compose exec -T api mypy app

      - name: Run tests
        run: |
          docker compose exec -T api pytest -q -vv

      - name: Dump logs on failure
        if: failure()
        run: |
          docker compose logs api worker redis --tail=500 || true

      - name: Stop stack
        if: always()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml down -v
